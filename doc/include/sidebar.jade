#sidebar
    p
        a(href="#title") Introduction

    p
        a(href="#Graph") Graph
        :markdown
            - [constructor](#Graph-constructor)
            - [order](#Graph-order)
            - [size](#Graph-size)
            - [isDirected](#Graph-isDirected)
            - [graph](#Graph-graph)
            - [hasNode](#Graph-hasNode)
            - [node](#Graph-node)
            - [nodes](#Graph-nodes)
            - [eachNode](#Graph-eachNode)
            - [neighbors](#Graph-neighbors)
            - [hasEdge](#Graph-hasEdge)
            - [edge](#Graph-edge)
            - [edges](#Graph-edges)
            - [eachEdge](#Graph-eachEdge)
            - [incidentNodes](#Graph-incidentNodes)
            - [incidentEdges](#Graph-incidentEdges)
            - [equals](#Graph-equals)
            - [toString](#Graph-toString)
            - [addNode](#Graph-addNode)
            - [delNode](#Graph-delNode)
            - [addEdge](#Graph-addEdge)
            - [delEdge](#Graph-delEdge)
            - [copy](#Graph-copy)
            - [filterNodes](#Graph-filterNodes)
            - [toDigraph](#Graph-toDigraph)

    p
        a(href="#Digraph") Digraph
        :markdown
            - [constructor](#Digraph-constructor)
            - [order](#Digraph-order)
            - [size](#Digraph-size)
            - [isDirected](#Digraph-isDirected)
            - [graph](#Digraph-graph)
            - [hasNode](#Digraph-hasNode)
            - [node](#Digraph-node)
            - [nodes](#Digraph-nodes)
            - [eachNode](#Digraph-eachNode)
            - [successors](#Digraph-successors)
            - [predecessors](#Digraph-predecessors)
            - [neighbors](#Digraph-neighbors)
            - [sources](#Digraph-sources)
            - [sinks](#Digraph-sinks)
            - [hasEdge](#Digraph-hasEdge)
            - [edge](#Digraph-edge)
            - [edges](#Digraph-edges)
            - [eachEdge](#Digraph-eachEdge)
            - [source](#Digraph-source)
            - [target](#Digraph-target)
            - [incidentNodes](#Digraph-incidentNodes)
            - [inEdges](#Digraph-inEdges)
            - [outEdges](#Digraph-outEdges)
            - [incidentEdges](#Digraph-incidentEdges)
            - [equals](#Digraph-equals)
            - [toString](#Digraph-toString)
            - [addNode](#Digraph-addNode)
            - [delNode](#Digraph-delNode)
            - [addEdge](#Digraph-addEdge)
            - [delEdge](#Digraph-delEdge)
            - [copy](#Digraph-copy)
            - [filterNodes](#Digraph-filterNodes)
            - [toGraph](#Digraph-toGraph)

    p
        a(href="#CGraph") CGraph
        :markdown
            - [constructor](#CGraph-constructor)
            - [parent](#CGraph-parent)
            - [children](#CGraph-children)
            - [order](#CGraph-order)
            - [size](#CGraph-size)
            - [isDirected](#CGraph-isDirected)
            - [graph](#CGraph-graph)
            - [hasNode](#CGraph-hasNode)
            - [node](#CGraph-node)
            - [nodes](#CGraph-nodes)
            - [eachNode](#CGraph-eachNode)
            - [neighbors](#CGraph-neighbors)
            - [hasEdge](#CGraph-hasEdge)
            - [edge](#CGraph-edge)
            - [edges](#CGraph-edges)
            - [eachEdge](#CGraph-eachEdge)
            - [incidentNodes](#CGraph-incidentNodes)
            - [incidentEdges](#CGraph-incidentEdges)
            - [equals](#CGraph-equals)
            - [toString](#CGraph-toString)
            - [addNode](#CGraph-addNode)
            - [delNode](#CGraph-delNode)
            - [addEdge](#CGraph-addEdge)
            - [delEdge](#CGraph-delEdge)
            - [copy](#CGraph-copy)
            - [filterNodes](#CGraph-filterNodes)
            - [toDigraph](#CGraph-toDigraph)

    p
        a(href="#CDigraph") CDigraph
        :markdown
            - [constructor](#CDigraph-constructor)
            - [parent](#CDigraph-parent)
            - [children](#CDigraph-children)
            - [order](#CDigraph-order)
            - [size](#CDigraph-size)
            - [isDirected](#CDigraph-isDirected)
            - [graph](#CDigraph-graph)
            - [hasNode](#CDigraph-hasNode)
            - [node](#CDigraph-node)
            - [nodes](#CDigraph-nodes)
            - [eachNode](#CDigraph-eachNode)
            - [successors](#CDigraph-successors)
            - [predecessors](#CDigraph-predecessors)
            - [neighbors](#CDigraph-neighbors)
            - [sources](#CDigraph-sources)
            - [sinks](#CDigraph-sinks)
            - [hasEdge](#CDigraph-hasEdge)
            - [edge](#CDigraph-edge)
            - [edges](#CDigraph-edges)
            - [eachEdge](#CDigraph-eachEdge)
            - [source](#CDigraph-source)
            - [target](#CDigraph-target)
            - [incidentNodes](#CDigraph-incidentNodes)
            - [inEdges](#CDigraph-inEdges)
            - [outEdges](#CDigraph-outEdges)
            - [incidentEdges](#CDigraph-incidentEdges)
            - [equals](#CDigraph-equals)
            - [toString](#CDigraph-toString)
            - [addNode](#CDigraph-addNode)
            - [delNode](#CDigraph-delNode)
            - [addEdge](#CDigraph-addEdge)
            - [delEdge](#CDigraph-delEdge)
            - [copy](#CDigraph-copy)
            - [filterNodes](#CDigraph-filterNodes)
            - [toGraph](#CDigraph-toGraph)

    p
        a(href="#alg") alg
        :markdown
            - [topsort](#alg-topsort)
            - [isAcyclic](#alg-isAcyclic)
            - [findCycles](#alg-findCycles)
            - [dijkstra](#alg-dijkstra)
            - [dijkstraAll](#alg-dijkstraAll)
            - [floydWarshall](#alg-floydWarshall)
            - [tarjan](#alg-tarjan)
            - [components](#alg-components)
            - [prim](#alg-prim)
            - [preorder](#alg-preorder)
            - [postorder](#alg-postorder)

    p
        a(hef="#converter-json") converter.json
        :markdown
            - [decode](#converter-json-decode)
            - [encode](#converter-json-encode)
            
    p
        a(href="#filter") filter
        :markdown
            - [all](#filter-all)
            - [nodesFromList](#filter-nodesFromList)
