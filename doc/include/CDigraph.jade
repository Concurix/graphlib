- var graph = "cdigraph", Graph = "CDigraph";
- var directed = true;

h2(id="#{Graph}") #{Graph}
:markdown
    The `#{Graph}` class represents a compound [directed][] [multigraph][].
    It differs from [`Digraph`](#Digraph) in that its nodes can have children.

    Subsequent examples in this section assume that `#{Graph}` has been required
    as follows:

    ```js
    var #{Graph} = require("graphlib").#{Graph};
    var #{graph} = new #{Graph}();
    ```

    [directed]: https://en.wikipedia.org/wiki/Directed_graph
    [multigraph]: https://en.wikipedia.org/wiki/Multigraph

include graph/Graph-constructor
include graph/CGraph-parent
include graph/CGraph-children
include graph/Graph-order
include graph/Graph-size
include graph/Graph-isDirected
include graph/Graph-graph
include graph/Graph-hasNode
include graph/Graph-node
include graph/Graph-nodes
include graph/Graph-eachNode
include graph/Digraph-successors
include graph/Digraph-predecessors
include graph/Graph-neighbors
include graph/Digraph-sources
include graph/Digraph-sinks
include graph/Graph-hasEdge
include graph/Graph-edge
include graph/Graph-edges
include graph/Graph-eachEdge
include graph/Digraph-source
include graph/Digraph-target
include graph/Graph-incidentNodes
include graph/Digraph-inEdges
include graph/Digraph-outEdges
include graph/Graph-incidentEdges
include graph/Graph-addNode
include graph/Graph-delNode
include graph/Graph-addEdge
include graph/Graph-delNode
include graph/Graph-copy
include graph/Graph-filterNodes

h3#Digraph-toGraph digraph.toGraph()
:markdown
    Returns a new undirected graph using the nodes and edge from this graph.
    The new graph will have the same nodes, but the edges will be made
    undirected. Edge ids are preserved in this transformation.

    ```js
    digraph.addNode(1);
    digraph.addNode(2);
    digraph.addNode(3);
    digraph.addEdge("A", 1, 2);
    digraph.addEdge("B", 2, 3);

    var graph = digraph.toGraph();
    graph instanceof Graph;
    // => true

    graph.nodes();
    // => [ 1, 2, 3 ]

    graph.neighbors(2);
    // => [ 1, 3 ]

    graph.edges();
    // => [ "A", "B" ]
    ```
