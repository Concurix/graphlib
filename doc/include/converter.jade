h2#converter-json converter.json
:markdown
    The `converter` modules provide a way to convert a graph into some other
    form and back. Currently, we only support a JSON format. The JSON format is
    reversible, so the following assertion passes:

    ```js
    var decode = require("graphlib").converter.json.decode,
        encode = require("graphlib").converter.json.encode;

    var encoded = encode(graph);
    var decoded = decode(encoded.nodes, encoded.edges, encoded.type);
    assert.deepEqual(graph, decoded);
    ```

h3#converter-json-decode converter.json.decode(nodes, edges, [Ctor])
:markdown
    Creates a graph of type `Ctor`, or `Digraph` if `Ctor` is `undefined`, with
    the given `nodes` and `edges`. `Ctor` may be either a constructor function
    or one of the strings `"graph"`, `"digraph"`, `"cgraph"`, or `"cdigraph"`.
    
    `nodes` must be an array of entries of the form `{ [id], [value],
    [children] }`. If `id` is not set then a unique id will be assigned to the
    node. If `value` is not set then the node will be assigned the `undefined`
    value. `children` is only used when `Ctor instanceof CGraph || Ctor
    instanceof CDigraph` and if it is set it must contain an array of node ids
    in the graph.

    `edges` must be an array of entries of the form `{ [id], u, v, [value] }`. If 
    `id` is not set then a unique id will be assigned to the edge. `u` represents
    the source in a directed graph and one of the incident nodes in an undirected
    graph. `v` represents the target in a directed graph or the other incident
    node in a directed graph. If `value` is not set then the edge will be
    assigned the `undefined` value.

    Here's an example of decoding a simple directed graph:

    ```js
    var decode = require("graphlib").converter.json.decode,
        Digraph = require("graphlib").Digraph;

    var nodes = [{id: 1}, {id: 2}];
    var edges = [{id: "A", u: 1, v: 2}, {id: "B", u: 2, v: 1}];
    var graph = decode(nodes, edges);

    graph.nodes();
    // => [1, 2]

    graph.edges();
    // => ["A", "B"]

    graph.source("A");
    // => 1

    graph.target("A");
    // => 2
    ```

    Here's an exmple of decoding a compound directed graph:

    ```js
    var decode = require("graphlib").converter.json.decode,
        CDigraph = require("graphlib").CDigraph;

      var nodes = [{id: "sg1", children: [1, 2]},
                   {id: 1},
                   {id: 2}];
      var graph = decode(nodes, [], CGraph);

      graph.nodes();
      // => ["sg1", 1, 2]

      graph.children(null);
      // => ["sg1"]

      graph.children("sg1");
      // => [1, 2]
    ```

h3#converter-json-encode converter.json.encode(graph)
:markdown
    This function converts the given `graph` into an object of the form
    `{ nodes, edges, type }`. These `nodes` and `edges` act the same as the
    equivalent parameters for the `decode` function. The `type` property will
    be one of the strings `"graph"`, `"digraph"`, `"cgraph"`, or `"cdigraph"`.

    ```js
    var encode = require("graphlib").converter.json.encode,
        Digraph = require("graphlib").Digraph;

    var graph = new Digraph();
    graph.addNode(1);
    graph.addNode(2, "foo");
    graph.addEdge("A", 1, 2, "bar");

    encode(graph);
    // => { nodes: [{ id: 1, value: undefined },
    //              { id: 2, value: "foo" }],
    //      edges: [{ id: "A", u: 1, v: 2, value: "bar" }],
    //      type: "digraph" }
    ```
