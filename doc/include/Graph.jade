- var graph = "graph", Graph = "Graph";
- var directed = false;

h2(id="#{Graph}") #{Graph}
:markdown
    The `#{Graph}` class represents an [undirected][] [multigraph][].

    Subsequent examples in this section assume that `#{Graph}` has been required
    as follows:

    ```js
    var #{Graph} = require("graphlib").#{Graph};
    var #{graph} = new #{Graph}();
    ```

    [undirected]: https://en.wikipedia.org/wiki/Undirected_graph
    [multigraph]: https://en.wikipedia.org/wiki/Multigraph

include graph/Graph-constructor
include graph/Graph-order
include graph/Graph-size
include graph/Graph-isDirected
include graph/Graph-graph
include graph/Graph-hasNode
include graph/Graph-node
include graph/Graph-nodes
include graph/Graph-eachNode
include graph/Graph-neighbors
include graph/Graph-hasEdge
include graph/Graph-edge
include graph/Graph-edges
include graph/Graph-eachEdge
include graph/Graph-incidentNodes
include graph/Graph-incidentEdges
include graph/Graph-addNode
include graph/Graph-delNode
include graph/Graph-addEdge
include graph/Graph-delEdge
include graph/Graph-copy
include graph/Graph-filterNodes

h3#Graph-toDigraph graph.toDigraph()
:markdown
    Returns a new directed graph using the nodes and edge from this graph. The
    new graph will have the same nodes, but will have twice the number of
    edges: each edge is split into edges pointing in opposite directions. Edge
    ids, consequently, are not preserved by this transformation.

    ```js
    graph.addNode(1);
    graph.addNode(2);
    graph.addNode(3);
    graph.addEdge(null, 1, 2);
    graph.addEdge(null, 2, 3);
    graph.size();
    // => 3

    var digraph = graph.toDigraph();
    digraph instanceof Digraph;
    // => true

    digraph.nodes();
    // => [ 1, 2, 3 ]

    digraph.size();
    // => 6 /* twice the number of edges */

    digraph.successors(2);
    // => [ 1, 3 ]

    digraph.edges();
    // => [ "_ANON-1", "_ANON-2", "_ANON-3", "_ANON-4" ]
    ```
